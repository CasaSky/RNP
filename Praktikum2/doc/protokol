TCP-Client

Server: localhost
Port: 56789

Zeichen Codierung: UTF-8

leertaste - leerzeichen
inhalt -> Argument

TCP_Client sendet einen String in form von ($Befehl+" "+ $Argument + '\r' + '\n')
	$Befehl -> "username"
			$Argument -> Benutzername

		-> "message"
			$Argument -> Nachricht

		-> "clients"
			$Argument -> Benutzername
	
		-> "logout"
			$Argument -> Benutzername


	" " -> trennt Befehl und Argument
	
	'\r' + '\n' -> ende der Nachricht


TCP_Client empfängt ein String und zerteilt das in $Befehl und $Argument
	$Befehl = das erste Wort bis zur erste leerzeichen
	$Argument = alles nach der erste leerzeichen	
	 
	wenn $Befehl=="username"
		->wenn $Argument=="notok" -> Herstellen von username nicht möglich
		->wenn $Argument=="ok" -> Herstellen von username möglich

	wenn $Befehl=="message"
		->inhalt an GUI weitergeben 

	wenn $Befehl=="clients"
		->der $Inhalt mit Benutzernamen (mit Leertaste getrennt) an GUI weitergegeben

	wenn $Befehl=="logout"
		->logout() - true an Controller weitergeben


//Controller: 	- TCPClient Thread -> damit er ungestört, die gesendeten DATA vom Server bearbeiten kann.
		- listenThread -> der quasi-paralell mit den Controller und den workThread läuft -> Wenn sich ein User verbindet, soll der listenThread solange 		laufen, bis ein logout Befehl ausgeführt wird (Fals eine Nachricht aufgefasst wurde, während er noch läuft, wird sie in der UI angezeigt.)
		- workThread -> wird erzeugt, wenn der SendeButton gedrückt ist. Dieser Thread führt die Methode des Senden vom Client aus.

___________________________________________________________________________________________________
TCP-Server

Server: localhost
Port: 56789

Zeichen Codierung: UTF-8


TCP_Server sendet einen String inform von ($Befehl+" "+$Argument+  '\r' + '\n')
	$befehl -> "username"
			$Argument -> Statusmeldung

	       -> "message"
			$Argument -> Nachricht

	       -> "clients"
			$Argument -> $Teilnehmerliste
		
		-> "logout"
			$Argument -> $Username und schließt die Socket mit dem Client

	
	" " -> trennt $Befehl und $Argument
	
	'\r' + '\n' -> ende der Nachricht


TCP_Server empfängt ein String und zerteilt das in $Befehl und $Argument
	$Befehl = das erste Wort bis zur erste leerzeichen
	$Inhalt = alles nach der erste leerzeichen		
	
	wenn $Befehl=="username"
		//->Inhalt wird in Hashmap geprüft ob der value (Benutzer) vorhanden ist oder nicht 
			->falls ja -> Statusmeldung an Client ("notok")
			->nein -> wird in hashmap eingetragen und Statusmeldung an Client("ok") 
	
	wenn $Befehl=="message"
		->wird an alle Client Teilnehmer weiter geschickt in form ("message"($Befehl) + " " + $sender_username + " >> " + $Argument )

	
	wenn $Befehl=="clients"
		->wird eine String (liste der teilnehmer(username)) zurückgegeben , sodass die Benutzernamen mit leerzeichen   von einander getrennt sind. 
		Und das in form ("clients"($Befehl)+ " " +$Argument+$Teilnehmerliste)

	wenn $Befehl=="logout"
 		->Der Client wird aus der liste der Teilnehmer entfernt und Server bemerkt das der Client sich verabschiedet hat.(z.B.:quit)
  

___________________________________________________________________________________________________________

Fehlermeldung : Siehe Code - Beim senden eines unbekannten Befehls -> Exception Befehl wurde nicht erkannt! 
Ports: 
	besetzte Ports: netstat -ano 
	alle ports von 1 bis 65536 , die unter lokale adresse nicht auftauchen , sind nicht belegt
